// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  name             String
  email            String          @unique
  password         String
  subscriptionType String
  createdAt        DateTime        @default(now())
  analytics        Analytics[]
  certifications   Certification[]
  documents        Document[]
  educations       Education[]
  experiences      Experience[]
  favorites        Favorite[]
  notifications    Notification[]
  payments         Payment[]
  projects         Project[]
  reviews          Review[]
  skills           Skill[]
  subscriptions    Subscription[]
}

model Document {
  id             String          @id @default(cuid())
  userId         String
  title          String
  data           Json
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  aiEnhancements AIEnhancement[]
  certifications Certification[]
  user           User            @relation(fields: [userId], references: [id])
  educations     Education[]
  experiences    Experience[]
  projects       Project[]
  sharedLinks    SharedLink[]
  skills         Skill[]
}

model Template {
  id           String            @id @default(cuid())
  name         String
  category     String
  isPremium    Boolean
  countryId    String
  universityId String
  favorites    Favorite[]
  reviews      Review[]
  country      Country           @relation(fields: [countryId], references: [id])
  university   University        @relation(fields: [universityId], references: [id])
  sections     TemplateSection[]
}

model TemplateSection {
  id         String   @id @default(cuid())
  templateId String
  title      String
  order      Int
  type       String
  template   Template @relation(fields: [templateId], references: [id])
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  templateId String
  template   Template @relation(fields: [templateId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Category {
  id   String @id @default(cuid())
  name String
}

model Country {
  id           String       @id @default(cuid())
  name         String
  templates    Template[]
  universities University[]
}

model University {
  id        String     @id @default(cuid())
  name      String
  countryId String
  templates Template[]
  country   Country    @relation(fields: [countryId], references: [id])
}

model Certification {
  id            String    @id @default(cuid())
  userId        String
  documentId    String
  title         String
  issuer        String
  issueDate     DateTime
  expiryDate    DateTime?
  credentialUrl String?
  document      Document  @relation(fields: [documentId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
}

model Experience {
  id         String    @id @default(cuid())
  userId     String
  documentId String
  role       String
  company    String
  startDate  DateTime
  endDate    DateTime?
  document   Document  @relation(fields: [documentId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model Education {
  id         String    @id @default(cuid())
  userId     String
  documentId String
  degree     String
  school     String
  startDate  DateTime
  endDate    DateTime?
  document   Document  @relation(fields: [documentId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model Skill {
  id         String   @id @default(cuid())
  userId     String
  documentId String
  name       String
  level      String
  document   Document @relation(fields: [documentId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Project {
  id          String   @id @default(cuid())
  userId      String
  documentId  String
  title       String
  description String
  techStack   String
  document    Document @relation(fields: [documentId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String
  status    String
  plan      String
  startedAt DateTime
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Payment {
  id        String   @id @default(cuid())
  userId    String
  amount    Float
  status    String
  method    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  read      Boolean
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  templateId String
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  template   Template @relation(fields: [templateId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Analytics {
  id        String   @id @default(cuid())
  userId    String
  event     String
  meta      Json
  device    String
  location  String?
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model AIEnhancement {
  id            String   @id @default(cuid())
  documentId    String
  type          String
  contentBefore String
  contentAfter  String
  createdAt     DateTime @default(now())
  document      Document @relation(fields: [documentId], references: [id])
}

model SharedLink {
  id         String   @id @default(cuid())
  documentId String
  shareToken String   @unique
  views      Int      @default(0)
  createdAt  DateTime @default(now())
  document   Document @relation(fields: [documentId], references: [id])
}
